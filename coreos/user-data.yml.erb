#cloud-config

coreos:
  update:
    group: beta
    reboot-strategy: off
  units:
    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone

        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone <%= ENV["TIMEZONE"] %>
        RemainAfterExit=yes
        Type=oneshot
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target
    - name: postgres.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=PostgreSQL
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=0
        User=core
        ExecStartPre=-/usr/bin/docker kill postgres
        ExecStartPre=-/usr/bin/docker rm postgres
        ExecStartPre=/usr/bin/docker pull postgres:9.4
        ExecStart=/usr/bin/docker run --name postgres -p 5432:5432 postgres:9.4
        ExecStop=/usr/bin/docker stop postgres

        [Install]
        WantedBy=multi-user.target
    - name: postgres-setup.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone
        After=postgres.service
        Requires=postgres.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill postgres-setup
        ExecStartPre=-/usr/bin/docker rm postgres-setup
        ExecStartPre=/usr/bin/docker pull postgres:9.4
        ExecStart=/usr/bin/docker run --name postgres-setup --link postgres:db postgres:9.4 psql postgres://postgres@db:5432 -c 'create database drone;'
        RemainAfterExit=yes
        Type=oneshot
    - name: drone.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Drone
        After=postgres-setup.service
        Requires=postgres-setup.service

        [Service]
        TimeoutStartSec=0
        User=core
        ExecStartPre=-/usr/bin/docker kill drone
        ExecStartPre=-/usr/bin/docker rm drone
        ExecStartPre=/usr/bin/docker pull quay.io/dtan4/drone:0.4.0
        ExecStart=/usr/bin/docker run --name drone --link postgres:db -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -e DATABASE_DRIVER=postgres -e DATABASE_CONFIG="postgres://postgres@db:5432/drone?sslmode=disable" -e REMOTE_DRIVER=github -e REMOTE_CONFIG="https://github.com?client_id=<%= ENV["DRONE_GITHUB_CLIENT"] %>&client_secret=<%= ENV["DRONE_GITHUB_SECRET"] %>" quay.io/dtan4/drone:0.4.0
        ExecStop=/usr/bin/docker stop drone

        [Install]
        WantedBy=multi-user.target
write_files:
  - path: /etc/ssh/sshd_config
    permissions: 0600
    owner: root:root
    content: |
      # Use most defaults for sshd configuration.
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp

      PermitRootLogin no
      PasswordAuthentication no
      ChallengeResponseAuthentication no
  - path: /etc/ntp.conf
    content: |
      # Common pool
      server 0.pool.ntp.org
      server 1.pool.ntp.org
      server 2.pool.ntp.org
      server 3.pool.ntp.org

      # - Allow only time queries, at a limited rate.
      # - Allow all local queries (IPv4, IPv6)
      restrict default nomodify nopeer noquery limited kod
      restrict 127.0.0.1
      restrict [::1]
